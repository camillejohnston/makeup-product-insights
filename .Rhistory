distinct() %>%
left_join(product_list)
sephora_left %>%
summarise(distinct_product_id = n_distinct(product_id))
table(sephora_left$secondary_category)
sephora_left %>%
group_by(product_id) %>%
count(secondary_category)
test <- sephora_left %>%
group_by(product_id)
test <- sephora_left %>%
group_by(product_id) %>%
summarize(n = n())
View(test)
test <- sephora_left %>%
group_by(product_id) %>%
summarize(n = n()) %>%
left_join(product_list)
View(test)
table(test$secondary_category)
sort(table(test$secondary_category), decreasing = T)
View(test)
sephora %>% filter(secondary_category == "Eye Care")
## List CSV files, read them, and bind into a single data frame
sephora <- list.files(path = "/Users/camillejohnston/Documents/TidyTuesday/sephora_101423/raw_data/",
pattern = "^reviews.*\\.csv$",
full.names = TRUE) %>%
map_df(~ fread(.x), .id = "file_id") %>%
select(product_id, product_name, brand_name, submission_time, rating, is_recommended, review_title, review_text) %>%
mutate(year = as.numeric(substr(submission_time, 1, 4))) %>%
distinct() %>%
left_join(product_list)
sephora %>% filter(secondary_category == "Eye Care")
sephora %>% filter(secondary_category == "Eye Care") %>% View()
sephora %>% distinct(product_id) %>% VIew()
sephora %>% distinct(product_id) %>% View()
sephora %>% distinct(product_id, secondary_category, product_name) %>% View()
test2 <- sephora %>% distinct(product_id, secondary_category, product_name) %>% View()
test2 <- sephora %>% distinct(product_id, secondary_category, product_name)
table(test2$secondary_category)
table(test2$secondary_category, test2$product_name)
table(test2$secondary_category, test2$product_id)
test2 %>% group_by(secondary_category, product_name) %>%summarize(n = n()
)
test2 %>% group_by(secondary_category, product_name) %>%summarize(n = n()) %>% VIew()
test2 %>% group_by(secondary_category, product_name) %>%summarize(n = n()) %>% View()
test3 <- test2 %>% group_by(secondary_category, product_name) %>%summarize(n = n())
View(test3)
View(test2)
View(test3)
View(test2)
View(test3)
View(test2)
View(test3)
View(test3)
test3 <- sephora %>% group_by(secondary_category, product_name) %>%summarize(n = n())
View(test3)
table(test3$secondary_category)
table(sephora_left$secondary_category)
sort(table(test$secondary_category), decreasing = T)
sort(table(test3$secondary_category), decreasing = T)
sort(table(test2$secondary_category), decreasing = T)
test3 <- sephora %>% group_by(secondary_category, product_name) %>%summarize(n = n())
View(test3)
table(sephora_left$secondary_category)
sort(table(sephora$secondary_category), decreasing = T)
View(test2)
## Load in product categories
product_list <- fread("/Users/camillejohnston/Documents/TidyTuesday/sephora_101423/raw_data/product_info.csv") %>%
select(product_id, primary_category, secondary_category)
## List CSV files, read them, and bind into a single data frame
sephora <- list.files(path = "/Users/camillejohnston/Documents/TidyTuesday/sephora_101423/raw_data/",
pattern = "^reviews.*\\.csv$",
full.names = TRUE) %>%
map_df(~ fread(.x), .id = "file_id") %>%
select(product_id, product_name, brand_name, submission_time, rating, is_recommended, review_title, review_text) %>%
mutate(year = as.numeric(substr(submission_time, 1, 4))) %>%
distinct() %>%
left_join(product_list)
test <- sephora %>%
group_by(product_id, secondary_category) %>%
summarize(n = n())
View(test)
table(test$secondary_category)
sort(table(test$secondary_category), decreasing = T)
## Set curent directory as our path
path <- here::here()
## Read clean dataframes
#sephora_tokens <- fread(paste0(path, "/data/sephora_tokens.csv"))
#sephora_token_counts <- fread(paste0(path, "/data/sephora_token_counts.csv"))
#sephora_token_counts_year <- fread(paste0(path, "/data/sephora_token_counts_year.csv"))
sephora_token_counts_category <- fread(paste0(path, "/data/sephora_token_counts_category.csv"))
## Read clean dataframes
#sephora_tokens <- fread(paste0(path, "/data/sephora_tokens.csv"))
#sephora_token_counts <- fread(paste0(path, "/data/sephora_token_counts.csv"))
sephora_token_counts_year <- fread(paste0(path, "/data/sephora_token_counts_year.csv"))
sephora_token_counts_category %>%
anti_join(get_stopwords()) %>%
ggplot(aes(n, average_rating)) +
geom_hline(yintercept = 2.63, lty = 2, color = "grey", size = 0.5) +
geom_text(aes(label = word, color = secondary_category), check_overlap = TRUE, show.legend = FALSE, vjust = "top", hjust = "left") +
scale_x_log10(labels = function(x) format(x, scientific = FALSE)) +
facet_wrap(vars(secondary_category))+
theme_classic()
View(sephora_token_counts_category)
sephora_token_counts_category %>%
anti_join(get_stopwords()) %>%
filter(n > 50) %>%
ggplot(aes(n, average_rating)) +
geom_hline(yintercept = 2.63, lty = 2, color = "grey", size = 0.5) +
geom_text(aes(label = word, color = secondary_category), check_overlap = TRUE, show.legend = FALSE, vjust = "top", hjust = "left") +
scale_x_log10(labels = function(x) format(x, scientific = FALSE)) +
facet_wrap(vars(secondary_category))+
theme_classic()
sephora_token_counts_category %>%
anti_join(get_stopwords()) %>%
filter(n > 30) %>%
ggplot(aes(n, average_rating)) +
geom_hline(yintercept = 2.63, lty = 2, color = "grey", size = 0.5) +
geom_text(aes(label = word, color = secondary_category), check_overlap = TRUE, show.legend = FALSE, vjust = "top", hjust = "left") +
scale_x_log10(labels = function(x) format(x, scientific = FALSE)) +
facet_wrap(vars(secondary_category))+
theme_classic()
sephora_token_counts_category %>%
anti_join(get_stopwords()) %>%
filter(n > 40) %>%
ggplot(aes(n, average_rating)) +
geom_hline(yintercept = 2.63, lty = 2, color = "grey", size = 0.5) +
geom_text(aes(label = word, color = secondary_category), check_overlap = TRUE, show.legend = FALSE, vjust = "top", hjust = "left") +
scale_x_log10(labels = function(x) format(x, scientific = FALSE)) +
facet_wrap(vars(secondary_category))+
theme_classic()
sephora_token_counts_category %>%
anti_join(get_stopwords()) %>%
filter(n > 30) %>%
ggplot(aes(n, average_rating)) +
geom_hline(yintercept = 2.63, lty = 2, color = "grey", size = 0.5) +
geom_text(aes(label = word, color = secondary_category), check_overlap = TRUE, show.legend = FALSE, vjust = "top", hjust = "left") +
scale_x_log10(labels = function(x) format(x, scientific = FALSE)) +
facet_wrap(vars(secondary_category))+
theme_classic()
View(sephora_token_counts_category)
sephora_token_counts_category %>%
anti_join(get_stopwords()) %>%
filter(!str_detect(word, "[A-Za-z]")) %>%
filter(n > 30) %>%
ggplot(aes(n, average_rating)) +
geom_hline(yintercept = 2.63, lty = 2, color = "grey", size = 0.5) +
geom_text(aes(label = word, color = secondary_category), check_overlap = TRUE, show.legend = FALSE, vjust = "top", hjust = "left") +
scale_x_log10(labels = function(x) format(x, scientific = FALSE)) +
facet_wrap(vars(secondary_category))+
theme_classic()
sephora_token_counts_category %>%
anti_join(get_stopwords()) %>%
filter(str_detect(word, "[A-Za-z]")) %>%
filter(n > 30) %>%
ggplot(aes(n, average_rating)) +
geom_hline(yintercept = 2.63, lty = 2, color = "grey", size = 0.5) +
geom_text(aes(label = word, color = secondary_category), check_overlap = TRUE, show.legend = FALSE, vjust = "top", hjust = "left") +
scale_x_log10(labels = function(x) format(x, scientific = FALSE)) +
facet_wrap(vars(secondary_category))+
theme_classic()
sephora_token_counts_category %>%
anti_join(get_stopwords()) %>%
filter(str_detect(word, "[A-Za-z]")) %>%
filter(nchar(word) > 1) %>%
filter(n > 30) %>%
ggplot(aes(n, average_rating)) +
geom_hline(yintercept = 2.63, lty = 2, color = "grey", size = 0.5) +
geom_text(aes(label = word, color = secondary_category), check_overlap = TRUE, show.legend = FALSE, vjust = "top", hjust = "left") +
scale_x_log10(labels = function(x) format(x, scientific = FALSE)) +
facet_wrap(vars(secondary_category))+
theme_classic()
View(sephora_token_counts_year)
sephora_token_counts_category %>%
ggplot(aes(x = year, y = average_rating, group = word, color = n)) +
geom_line() +
labs(x = "Year", y = "Score") +
theme_minimal()
sephora_token_counts_year %>%
ggplot(aes(x = year, y = average_rating, group = word, color = n)) +
geom_line() +
labs(x = "Year", y = "Score") +
theme_minimal()
sephora_token_counts_year %>%
ggplot(aes(x = year, y = average_rating, group = word)) +
geom_smooth(method = "lm", se = FALSE) +  # Fit linear regression lines
labs(x = "Year", y = "Score") +
theme_minimal()
sephora_token_counts_year %>%
ggplot(aes(x = year, y = average_rating, group = word, color = n)) +
geom_smooth(method = "lm", se = FALSE) +  # Fit linear regression lines
labs(x = "Year", y = "Score") +
theme_minimal()
sephora_token_counts_year %>%
ggplot(aes(x = year, y = average_rating, group = word, colour = n)) +
geom_smooth(method = "lm", se = FALSE) +  # Fit linear regression lines
labs(x = "Year", y = "Score") +
theme_minimal()
linear_slopes <- sephora_token_counts_year %>%
group_by(word, secondary_rating) %>%
do(model = lm(average_rating ~ year, data = .)) %>%
summarize(
word = word[1],
slope = coef(model)[2],         # Extract the slope coefficient
intercept = coef(model)[1],     # Extract the intercept coefficient
significance = summary(model)$coefficients[2, 4]  # Extract the p-value for the slope
) %>%
ungroup()
linear_slopes <- sephora_token_counts_category %>%
group_by(word, secondary_rating) %>%
do(model = lm(average_rating ~ year, data = .)) %>%
summarize(
word = word[1],
slope = coef(model)[2],         # Extract the slope coefficient
intercept = coef(model)[1],     # Extract the intercept coefficient
significance = summary(model)$coefficients[2, 4]  # Extract the p-value for the slope
) %>%
ungroup()
names(sephora_token_counts_category)
linear_slopes <- sephora_token_counts_category %>%
group_by(word, secondary_category) %>%
do(model = lm(average_rating ~ year, data = .)) %>%
summarize(
word = word[1],
slope = coef(model)[2],         # Extract the slope coefficient
intercept = coef(model)[1],     # Extract the intercept coefficient
significance = summary(model)$coefficients[2, 4]  # Extract the p-value for the slope
) %>%
ungroup()
linear_slopes <- sephora_token_counts_category %>%
group_by(word, secondary_category) %>%
do(model = lm(average_rating ~ year, data = .))
View(linear_slopes)
word = word[1]
linear_slopes <- sephora_token_counts_category %>%
group_by(word, secondary_category) %>%
do(model = lm(average_rating ~ year, data = .)) %>%
summarize(
word = word[1],
slope = coef(model)[2],         # Extract the slope coefficient
intercept = coef(model)[1],     # Extract the intercept coefficient
#significance = summary(model)$coefficients[2, 4]  # Extract the p-value for the slope
) %>%
ungroup()
View(linear_slopes)
linear_slopes <- sephora_token_counts_category %>%
group_by(word, secondary_category) %>%
do(model = lm(average_rating ~ year, data = .)) %>%
filter(!is.null(model)) %>%
summarize(
word = word[1],
slope = coef(model)[2],         # Extract the slope coefficient
intercept = coef(model)[1],     # Extract the intercept coefficient
significance = summary(model)$coefficients[2, 4]  # Extract the p-value for the slope
) %>%
ungroup()
linear_slopes <- sephora_token_counts_category %>%
group_by(word, secondary_category) %>%
do(model = lm(average_rating ~ year, data = .)) %>%
filter(!is.null(model)) %>%
summarize(
word = word[1],
slope = coef(model)[2],         # Extract the slope coefficient
intercept = coef(model)[1],     # Extract the intercept coefficient
significance = ifelse(nrow(summary(model)$coefficients) >= 2 && ncol(summary(model)$coefficients) >= 4,
summary(model)$coefficients[2, 4], NA)  # Extract the p-value for the slope if available, otherwise NA
) %>%
ungroup()
View(sephora_token_counts_category)
View(linear_slopes)
View(linear_slopes)
nrow(summary(model)$coefficients)
linear_slopes <- sephora_token_counts_category %>%
group_by(word, secondary_category) %>%
do(model = lm(average_rating ~ year, data = .)) %>%
filter(!is.null(model)) %>%
summarize(
word = word[1],
secondary_category = secondary_category[1],
slope = coef(model)[2],         # Extract the slope coefficient
intercept = coef(model)[1],     # Extract the intercept coefficient
significance = ifelse(nrow(summary(model)$coefficients) >= 2 & ncol(summary(model)$coefficients) >= 4,
summary(model)$coefficients[2, 4], NA)  # Extract the p-value for the slope if available, otherwise NA
) %>%
ungroup()
View(linear_slopes)
linear_slopes[14737]
linear_slopes[14737, ]
linear_slopes %>%
filter(significance < 0.05) %>%
slice_max(abs(slope), n = 10) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category))+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 10) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category))+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 10) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.01) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 10) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
#filter(!(word %in% c("opt", "vit", "sat"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat", "co"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes_significant <-  linear_slopes %>%
filter(significance < 0.01) %>%
filter(abs(slope) >= 0.1) %>%
select(word)
linear_slopes_significant <-  linear_slopes %>%
filter(significance < 0.01)
linear_slopes_significant_words <- linear_slopes_significant %>%
filter(abs(slope) >= 0.1) %>%
select(word)
token_trajectories_lm <- sephora_token_counts_category %>%
right_join(linear_slopes_significant_words) %>%
ggplot(aes(x = year, y = average_rating, group = word, color = word)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Year", y = "Score") +
theme_classic()
linear_slopes_significant_words <- linear_slopes_significant %>%
filter(abs(slope) >= 0.1) %>%
select(word)
View(linear_slopes_significant_words)
linear_slopes_significant_words <- linear_slopes_significant %>%
filter(abs(slope) >= 0.1) %>%
select(word, secondary_category)
View(linear_slopes_significant_words)
linear_slopes_significant_words <- linear_slopes_significant %>%
filter(abs(slope) >= 0.1) %>%
select(word, secondary_category) %>%
filter(str_detect(word, "[A-Za-z]")) %>%
filter(nchar(word) > 1)
View(linear_slopes_significant_words)
token_trajectories_lm <- sephora_token_counts_category %>%
right_join(linear_slopes_significant_words, by = c(word, secondary_category)) %>%
ggplot(aes(x = year, y = average_rating, group = word, color = word)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Year", y = "Score") +
theme_classic()
linear_slopes_significant_words <- linear_slopes_significant %>%
filter(abs(slope) >= 0.1) %>%
select(word, secondary_category) %>%
filter(str_detect(word, "[A-Za-z]")) %>%
filter(nchar(word) > 1)
View(linear_slopes_significant_words)
names(sephora_token_counts_category)
token_trajectories_lm <- sephora_token_counts_category %>%
right_join(linear_slopes_significant_words, by = c(word, secondary_category)) %>%
ggplot(aes(x = year, y = average_rating, group = word, color = word)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Year", y = "Score") +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat",))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
labs(y = "keyword")+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat",))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
ylab("keyword")+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat", "co"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat", "co"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
labs(y = "keyword")
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat", "co"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
labs(y = "keyword")+
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat", "co"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
labs(y = "keyword")+
scale_fill_discrete(name = "Dose", labels = c("associated with BETTER ratings over time", "associated with WORSE ratings over time")) +
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat", "co"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
labs(y = "keyword")+
scale_fill_discrete(name = "Dose", labels = c("associated with \nBETTER ratings over time", "associated with WORSE ratings over time")) +
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat", "co"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
labs(y = "keyword")+
scale_fill_discrete(name = "Dose", labels = c("associated with \nBETTER ratings over time", "associated with \nWORSE ratings over time")) +
geom_col(alpha = 0.8) +
theme_classic()
linear_slopes %>%
filter(significance < 0.05) %>%
filter(!(word %in% c("opt", "vit", "sat", "co"))) %>%
group_by(secondary_category) %>%
slice_max(abs(slope), n = 12) %>%
ungroup() %>%
ggplot(aes(slope, fct_reorder(word, slope), fill = slope > 0)) +
facet_wrap(vars(secondary_category), scales = "free")+
labs(y = "keyword")+
scale_fill_discrete(name = "Associated with...", labels = c("WORSE ratings over time", "BETTER ratings over time")) +
geom_col(alpha = 0.8) +
theme_classic()
